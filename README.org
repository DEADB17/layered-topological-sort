#+title: Layered topological sort (JavaScript)
#+date: <2020-01-26 Sun>
#+AUTHOR: DEADB17
#+EMAIL: deadb17@gmail.com
#+language: en
#+exclude_tags: noexport
#+creator: Emacs 27.0.50 (Org mode 9.3.1)

Layer-based scheduling algorithm for parallel tasks with dependencies. \\
Determines which tasks can be executed in parallel, by evaluating dependencies.

/The code is a JavaScript rewrite of [[https://github.com/quipo/dependencysolver][quipo/dependencysolver]] and the introduction
is taken from its [[https://github.com/quipo/dependencysolver/blob/2b009cb4ddcc2d0c564450ff99dcdc7c8959f79d/README.md][README.md]]./

* Introduction

Given a list of entries (each with its own dependency list), it can sort them in
layers of execution, where all entries in the same layer can be executed in
parallel, and have no other dependency than the previous layer.

For instance, given entries ~A~, ~B~, ~C~, ~D~, where ~B~ and ~C~ depend on ~A~,
and ~D~ depends on ~B~ and ~C~, this function will return three layers of
execution (as ~B~ and ~C~ can be executed in parallel after ~A~ completes):

*Dependency tree*
#+begin_example
    A
   / \
  B   C
   \ /
    D
#+end_example

*Resulting execution layers*
| Layer 1 | A    |
| Layer 2 | B, C |
| Layer 3 | D    |

** JavaScript representation
- A *task* is represented by a string.
- An *entry* is a two element array:
  1. A *Task*.
  2. An array of tasks representing the *dependencies*.
- Entries are grouped into an array.
#+name: example-1
#+begin_src js
  [
    ['A', []],
    ['B', ['A']],
    ['C', ['A']],
    ['D', ['B', 'C']],
  ]
#+end_src

Running
#+begin_src js
  layeredTopologicalSort([
    ['A', []],
    ['B', ['A']],
    ['C', ['A']],
    ['D', ['B', 'C']],
  ]);
#+end_src

#+name: run-example-1
#+begin_src js :noweb yes :results output :exports results :wrap src js
  const entries =
  <<example-1>>
  <<test>>
  tlog([ [ 'A' ], [ 'B', 'C' ], [ 'D' ] ])
#+end_src

Produces an array of layers, where each layer is an array of tasks.

#+RESULTS: run-example-1
#+begin_src js
[ [ 'A' ], [ 'B', 'C' ], [ 'D' ] ]
#+end_src

* Examples
** No dependencies
#+name: example-2
#+begin_src js
  [
    ['A', []],
    ['B', []],
    ['C', []],
    ['D', []],
  ]
#+end_src

#+name: run-example-2
#+begin_src js :noweb yes :results output :exports results :wrap src js
  const entries =
  <<example-2>>
  <<test>>
  tlog([ [ 'A', 'B', 'C', 'D' ] ]);
#+end_src

Produces a single layer, since all tasks are independent:

#+RESULTS: run-example-2
#+begin_src js
[ [ 'A', 'B', 'C', 'D' ] ]
#+end_src

** Interdependent
#+name: example-3
#+begin_src js
  [
    ['A', []],
    ['B', ['A']],
    ['C', ['B']],
    ['D', ['C']],
  ]
#+end_src

#+name: run-example-3
#+begin_src js :noweb yes :results output :exports results :wrap src js
  const entries =
  <<example-3>>
  <<test>>
  tlog([ [ 'A' ], [ 'B' ], [ 'C' ], [ 'D' ] ]);
#+end_src

Produces one layer per entry since they are interdependent and can't run in parallel:

#+RESULTS: run-example-3
#+begin_src js
[ [ 'A' ], [ 'B' ], [ 'C' ], [ 'D' ] ]
#+end_src

** As soon as possible
Entries are scheduled to start as soon as possible, which is not always ideal.
#+name: example-5
#+begin_src js
  [
    ['A', []],
    ['B', ['A']],
    ['C', ['B', 'D']],
    ['D', []],
  ]
#+end_src

#+name: run-example-5
#+begin_src js :noweb yes :results output :exports results :wrap src js
  const entries =
  <<example-5>>
  <<test>>
  tlog([ [ 'A', 'D' ], [ 'B' ], [ 'C' ] ]);
#+end_src

Produces:

#+RESULTS: run-example-5
#+begin_src js
[ [ 'A', 'D' ], [ 'B' ], [ 'C' ] ]
#+end_src

If ~D~ takes longer than ~A~ it will delay ~B~ unnecessarily since it's not
needed until ~C~. It'd be better if ~D~ was in the 2nd layer.

[[./asap-alap.svg]]

** Circular dependencies
#+name: example-6
#+begin_src js
  [
    ['A', ['B']],
    ['B', ['A']],
  ]
#+end_src

#+name: run-example-6
#+begin_src js :noweb yes :results output :exports results :wrap src js
  const entries =
  <<example-6>>
  <<test>>
  tlog([]);
#+end_src

Circular dependencies produce no results

#+RESULTS: run-example-6
#+begin_src js
[]
#+end_src

** Complex
#+name: example-4
#+begin_src js
  [
    ['A', []],
    ['B', ['A']],
    ['C', ['A', 'D']],
    ['D', ['E', 'B']],
    ['E', []],
    ['F', ['A', 'D', 'G']],
    ['G', ['H', 'I', 'J']],
    ['H', ['K']],
    ['I', ['K']],
    ['J', ['K']],
    ['K', []],
  ]
#+end_src

#+name: run-example-4
#+begin_src js :noweb yes :results output :exports results :wrap src js
  const entries =
  <<example-4>>
  <<test>>
  tlog([
    [ 'A', 'E', 'K' ],
    [ 'B', 'H', 'I', 'J' ],
    [ 'D', 'G' ],
    [ 'C', 'F' ]
  ]);
#+end_src

Produces:

#+RESULTS: run-example-4
#+begin_src js
[
  [ 'A', 'E', 'K' ],
  [ 'B', 'H', 'I', 'J' ],
  [ 'D', 'G' ],
  [ 'C', 'F' ]
]
#+end_src

* Code
#+name: layeredTopologicalSort
#+begin_src js
  /**
   ,* LayeredTopologicalSort returns a list of layers of entries, the entries
   ,* within each layer can be executed in parallel.
   ,*
   ,* @arg {Entry[]} entries
   ,* @return {string[][]}
   ,*/
  function layeredTopologicalSort(entries) {
    /** @type {{entryId: {dep: boolean}}} */
    const dependenciesToFrom = Object.create(null);
    /** @type {{dep: {entryId: boolean}}} */
    const dependenciesFromTo = Object.create(null);

    // Build the dependencies graph
    for (const entry of entries) {
      const entryId = entry[0];
      dependenciesToFrom[entryId] = Object.create(null);
      const entryDeps = entry[1];
      for (const entryDep of entryDeps) {
        dependenciesToFrom[entryId][entryDep] = true;
        if (!dependenciesFromTo[entryDep]) dependenciesFromTo[entryDep] = Object.create(null);
        dependenciesFromTo[entryDep][entryId] = true;
      }
    }

    /** @type {string[][]} */
    const layers = [];

    while (0 < Object.keys(dependenciesToFrom).length) {
      /** @type {string[]} */
      const thisIterationIds = [];

      for (const k in dependenciesToFrom) {
        const v = dependenciesToFrom[k];

        // If an item has zero dependencies, remove it
        if (Object.keys(v).length === 0) thisIterationIds.push(k);
      }

      // if nothing was found to remove, there's no valid sort
      if (thisIterationIds.length === 0) return [];

      /** @type {string[]} */
      const layer = [];
      for (const id of thisIterationIds) {
        // Add them to the overall ordering
        layer.push(id);

        // Remove the found items from the dictionary
        delete dependenciesToFrom[id];

        // Remove all outbound edges
        if (dependenciesFromTo[id]) {
          for (const dep in dependenciesFromTo[id]) {
            delete dependenciesToFrom[dep][id];
          }
        }
      }
      layers.push(layer);
    }
    return layers;
  }
#+end_src

#+name: extra
#+begin_src js
  /** @typedef {[string, string[]]} Entry */

  /**
   ,* Returns false if there are no cycles in the dependency graph.
   ,*
   ,* @arg {Entry[]} entries
   ,* @ret {boolean}
   ,*/
  function hasCircularDependency(entries) {
    return layeredTopologicalSort(entries).length <= 0;
  }
#+end_src

#+name: main
#+begin_src js :noweb yes :exports none
  <<extra>>
  <<layeredTopologicalSort>>
#+end_src

#+begin_src js :noweb yes :tangle layeredTopologicalSort.js :exports none
  <<main>>
  export {
    layeredTopologicalSort,
    hasCircularDependency,
    createEntry,
  };
#+end_src

#+name: test
#+begin_src js :noweb yes :exports none
  ; <<main>>
  function tlog(expected) {
    const result = layeredTopologicalSort(entries);
    console.log(result);
    const res = JSON.stringify(result);
    const exp = JSON.stringify(expected);
    if (res !== exp) {
      throw `Result does not match expected: ${res} !== ${exp}`;
    };
  }
#+end_src
