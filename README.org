#+title: Layered topological sort (JavaScript)
#+date: <2020-01-26 Sun>
#+AUTHOR: DEADB17
#+EMAIL: deadb17@gmail.com
#+language: en
#+exclude_tags: noexport
#+creator: Emacs 27.0.50 (Org mode 9.3.1)

Layer-based scheduling algorithm for parallel tasks with dependencies.

Determines which tasks can be executed in parallel, by evaluating dependencies
and scheduling them to start /as soon as possible/ or /as late as possible/.

/Acknowledgement: The code is based on [[https://github.com/quipo/dependencysolver][quipo/dependencysolver]] and the
introduction is taken from its [[https://github.com/quipo/dependencysolver/blob/2b009cb4ddcc2d0c564450ff99dcdc7c8959f79d/README.md][README.md]]./

* Introduction

Given a list of entries (each task with its own dependency list), it can sort
them in layers of execution, where all task in the same layer can be executed
in parallel, and have no other dependency than the previous layer.

For instance, given the tasks ~A~, ~B~, ~C~, ~D~, where ~B~ and ~C~ depend on
~A~, and ~D~ depends on ~B~ and ~C~, this function will return three layers of
execution (as ~B~ and ~C~ can be executed in parallel after ~A~ completes):

*Dependency tree*
#+begin_example
    A
   / \
  B   C
   \ /
    D
#+end_example

*Resulting execution layers*
| Layer 1 | A    |
| Layer 2 | B, C |
| Layer 3 | D    |

** JavaScript representation and API
- A *Task* is represented by a string.
- *Dependencies* is an array of tasks.
- *Entries* is a map of dependencies keyed by a task.
- A *Layer* is an array of tasks.
- *Layers* is an array of layers.
- =asap(entries)= Returns layers, where the dependencies are ordered to run as
  soon as possible.
- =alap(entries)= Returns layers, where the dependencies are ordered to run as
  late as possible.

#+name: intro-example
#+begin_src js
  const entries = {
    A: [],
    B: ['A'],
    C: ['A'],
    D: ['B', 'C'],
  }
#+end_src

#+name: run-intro-example
#+begin_src js :noweb yes :results output :exports results :wrap src js
  <<intro-example>>
  <<test>>
  bothlog([ [ 'A' ], [ 'B', 'C' ], [ 'D' ] ])
#+end_src

Running either =asap(entries)= or =alap(entries)= produces an array of layers,
where each layer is an array of tasks.

#+RESULTS: run-intro-example
#+begin_src js
[ [ 'A' ], [ 'B', 'C' ], [ 'D' ] ]
#+end_src

** As soon or as late as possible
Entries are scheduled to start either /as soon as possible/ (=asap=) or /as late
as possible/ (=alap=). Depending on the duration and order of tasks each can
produce a shorter schedule.

#+name: asap-alap-example
#+begin_src js
  const entries = {
    A: [],
    B: [],
    C: ['A'],
    D: ['B', 'C'],
  }
#+end_src

#+name: run-asap-example
#+begin_src js :noweb yes :results output :exports results :wrap src js
  <<asap-alap-example>>
  <<test>>
  asaplog([ [ 'A', 'B' ], [ 'C' ], [ 'D' ] ]);
#+end_src

Running =asap(entries)= produces:

#+RESULTS: run-asap-example
#+begin_src js
[ [ 'A', 'B' ], [ 'C' ], [ 'D' ] ]
#+end_src

#+name: run-alap-example
#+begin_src js :noweb yes :results output :exports results :wrap src js
  <<asap-alap-example>>
  <<test>>
  alaplog([ [ 'A' ], [ 'B', 'C' ], [ 'D' ] ]);
#+end_src

While running =alap(entries)= produces:

#+RESULTS: run-alap-example
#+begin_src js
[ [ 'A' ], [ 'B', 'C' ], [ 'D' ] ]
#+end_src

*** =alap= is better than =asap=
alap [[./images/alap-win.svg]]

asap [[./images/asap-lose.svg]]

*** =asap= is better than =alap=
asap [[./images/asap-win.svg]]

alap [[./images/alap-lose.svg]]

* Examples
** No dependencies
#+name: no-deps
#+begin_src js
  const entries = {
    A: [],
    B: [],
    C: [],
    D: [],
  }
#+end_src

#+name: run-no-deps
#+begin_src js :noweb yes :results output :exports results :wrap src js
  <<no-deps>>
  <<test>>
  bothlog([ [ 'A', 'B', 'C', 'D' ] ]);
#+end_src

Both =asap(entries)= and =alap(entries)= produce a single layer, since all tasks
are independent:

#+RESULTS: run-no-deps
#+begin_src js
[ [ 'A', 'B', 'C', 'D' ] ]
#+end_src
** Interdependent
#+name: inter-dep
#+begin_src js
  const entries = {
    A: [],
    B: ['A'],
    C: ['B'],
    D: ['C'],
  }
#+end_src

#+name: run-inter-dep
#+begin_src js :noweb yes :results output :exports results :wrap src js
  <<inter-dep>>
  <<test>>
  bothlog([ [ 'A' ], [ 'B' ], [ 'C' ], [ 'D' ] ]);
#+end_src

Both =asap(entries)= and =alap(entries)= produce one layer per task since they
are interdependent and can't run in parallel:

#+RESULTS: run-inter-dep
#+begin_src js
[ [ 'A' ], [ 'B' ], [ 'C' ], [ 'D' ] ]
#+end_src
** Circular dependencies
#+name: circular
#+begin_src js
  const entries = {
    A: ['B'],
    B: ['A'],
  }
#+end_src

#+name: run-circular
#+begin_src js :noweb yes :results output :exports results :wrap src js
  <<circular>>
  <<test>>
  bothlog([]);
#+end_src

Circular dependencies produce no results.\\
Running =asap(entries)= or =alap(entries)= produces an empty layers array.

#+RESULTS: run-circular
#+begin_src js
[]
#+end_src

** Complex
#+name: complex
#+begin_src js
  const entries = {
    A: [],
    B: ['A'],
    C: ['A', 'D'],
    D: ['E', 'B'],
    E: [],
    F: ['A', 'D', 'G'],
    G: ['H', 'I', 'J'],
    H: ['K'],
    I: ['K'],
    J: ['K'],
    K: [],
  }
#+end_src

=asap(entries)= produces:

#+name: run-complex-asap
#+begin_src js :noweb yes :results output :exports results :wrap src js
    <<complex>>
    <<test>>
    asaplog([
      [ 'A', 'E', 'K' ],
      [ 'B', 'H', 'I', 'J' ],
      [ 'D', 'G' ],
      [ 'C', 'F' ]
    ]);
#+end_src

#+RESULTS: run-complex-asap
#+begin_src js
[
  [ 'A', 'E', 'K' ],
  [ 'B', 'H', 'I', 'J' ],
  [ 'D', 'G' ],
  [ 'C', 'F' ]
]
#+end_src

while =alap(entries)= produces:

#+name: run-complex-alap
#+begin_src js :noweb yes :results output :exports results :wrap src js
    <<complex>>
    <<test>>
    alaplog([
      [ 'A', 'K' ],
      [ 'B', 'E', 'J', 'I', 'H' ],
      [ 'D', 'G' ],
      [ 'C', 'F' ]
    ]);
#+end_src

#+RESULTS: run-complex-alap
#+begin_src js
[
  [ 'A', 'K' ],
  [ 'B', 'E', 'J', 'I', 'H' ],
  [ 'D', 'G' ],
  [ 'C', 'F' ]
]
#+end_src

* JavaScript Implementation
** Types
#+name: types
#+begin_src js
  /**
   ,* @typedef {string} Task
   ,* @typedef {Task[]} Dependencies
   ,* @typedef {{[task: string]: Dependencies}} Entries
   ,* @typedef {Task[]} Layer
   ,* @typedef {Layer[]} Layers
   ,* @typedef {{[task: string]: {[task: string]: boolean}}} DGraph
   ,*/
#+end_src

** ALAP
#+name: alap
#+begin_src js
  /**
   ,* Returns a list of layers of task sorted as late as possible,
   ,* the tasks within each layer can be executed in parallel.
   ,*
   ,* @arg {Entries} entries
   ,* @return {Layers}
   ,*/
  function alap(entries) {
    const dependencies = createGraphs(entries);
    const layers = layeredTopologicalSort(dependencies[1], dependencies[0]);
    layers.reverse();
    return layers;
  }
#+end_src

** ASAP
#+name: asap
#+begin_src js
  /**
   ,* Returns a list of layers of task sorted as soon as possible,
   ,* the tasks within each layer can be executed in parallel.
   ,*
   ,* @arg {Entries} entries
   ,* @return {Layers}
   ,*/
  function asap(entries) {
    const dependencies = createGraphs(entries);
    return layeredTopologicalSort(dependencies[0], dependencies[1]);
  }
#+end_src

** Create graphs
#+name: createGraphs
#+begin_src js
  /**
   ,* @arg {Entries} entries
   ,* @return {[DGraph, DGraph]}
   ,*/
  function createGraphs(entries) {
    /** @type {DGraph} */
    const toFrom = {};
    /** @type {DGraph} */
    const fromTo = {};

    // Build the dependencies graph
    for (const task in entries) {
      toFrom[task] = {};
      if (!fromTo[task]) fromTo[task] = {};
      const deps = entries[task];
      for (let n = deps.length - 1; 0 <= n; n -= 1) {
        const dep = deps[n];
        toFrom[task][dep] = true;
        if (!fromTo[dep]) fromTo[dep] = {};
        fromTo[dep][task] = true;
      }
    }
    return [toFrom, fromTo];
  }
#+end_src

** Layered topological sort
#+name: layeredTopologicalSort
#+begin_src js
  /**
   ,* LayeredTopologicalSort returns a list of layers of entries,
   ,* the entries within each layer can be executed in parallel.
   ,*
   ,* @arg {DGraph} toFrom
   ,* @arg {DGraph} fromTo
   ,* @return {Layers}
   ,*/
  function layeredTopologicalSort(toFrom, fromTo) {
    /** @type {Layers} */
    const layers = [];

    while (0 < Object.keys(toFrom).length) {
      /** @type {string[]} */
      const thisIterationIds = [];

      for (const k in toFrom) {
        const v = toFrom[k];

        // If an item has zero dependencies, remove it
        if (Object.keys(v).length === 0) thisIterationIds.push(k);
      }

      // if nothing was found to remove, there's no valid sort
      if (thisIterationIds.length === 0) return [];

      /** @type {Layer} */
      const layer = [];
      for (let i = 0, n = thisIterationIds.length; i < n; i++) {
        const id = thisIterationIds[i];
        // Add them to the overall ordering
        layer.push(id);

        // Remove the found items from the dictionary
        delete toFrom[id];

        // Remove all outbound edges
        if (fromTo[id]) {
          for (const dep in fromTo[id]) {
            delete toFrom[dep][id];
          }
        }
      }
      layers.push(layer);
    }
    return layers;
  }
#+end_src

#+name: main
#+begin_src js :noweb yes :exports none
  <<layeredTopologicalSort>>

  <<createGraphs>>

  <<asap>>

  <<alap>>
#+end_src

#+begin_src js :noweb yes :tangle layered-topological-sort.js :exports none
  <<types>>

  <<main>>

  export { alap, asap };
#+end_src

#+name: test
#+begin_src js :noweb yes :exports none
  ; <<main>>
  ; const dse = require('assert').deepStrictEqual;
  function asaplog(expected) { dse(asap(entries), expected); console.log(expected); }
  function alaplog(expected) { dse(alap(entries), expected); console.log(expected); }
  function bothlog(expected) {
    const soon = asap(entries);
    dse(soon, alap(entries));
    dse(soon, expected);
    console.log(expected);
  }
#+end_src
